Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n\r\n    <list default=\"true\" id=\"c422d995-8826-4c7b-a337-a4a5d2f71fb4\" name=\"Changes\" comment=\"\"/>\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_38_AM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_38_AM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_39_AM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_39_AM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n\r\n    <list default=\"true\" id=\"81b6554b-3ac0-4733-801a-2227054c4cdc\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dbnavigator.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/dbnavigator.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_38_AM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_38_AM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_39_AM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_39_AM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pom.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/stepDefinitions/APIStepDefinition.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/stepDefinitions/APIStepDefinition.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/testData/TestData_US_033.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/testData/TestData_US_033.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/utilities/ApiUtils.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/utilities/ApiUtils.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/utilities/DB_Utils.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/utilities/DB_Utils.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/test/resources/features/API/API_US011.feature\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/resources/features/API/API_US011.feature\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/test/resources/features/API/[API_US001].feature\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/resources/features/API/[API_US001].feature\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/test/resources/features/API/[API_US033].feature\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/resources/features/API/[API_US033].feature\" afterDir=\"false\" />\r\n\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeStyleSettingsInfer\">\r\n    <option name=\"done\" value=\"true\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2TstZcaAiagulNON49QKX9sozlE\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/gulte/Downloads/Team1_BackendProject/Team1_BackendProject&quot;\r\n  }\r\n}</component>\r\n\r\n  <component name=\"RunManager\"/>\r\n    <configuration name=\"Scenario: [TC_001] GET Request Success Response for the Visitor Purpose List\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\"/>\r\n\r\n  <component name=\"RunManager\" selected=\"Cucumber Java.Scenario: [TC001] api/visitorsUpdate endpoint'ine gecerli authorization bilgileri ve dogru datalar\">\r\n    <configuration name=\"Scenario: TC02 When invalid authorization information or missing/wrong data (id) are sent in the PATCH body (with title, event_for,\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n\r\n      <option name=\"CUCUMBER_CORE_VERSION\" value=\"5\" />\r\n      <option name=\"FILE_PATH\" value=\"$PROJECT_DIR$/src/test/resources/features/API/API_US011.feature\" />\r\n      <option name=\"GLUE\" value=\"stepDefinitions hooks.api\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"io.cucumber.core.cli.Main\" />\r\n      <module name=\"com.projectPreparation\" />\r\n      <option name=\"NAME_FILTER\" value=\"^TC02 When invalid authorization information or missing\\/wrong data \\(id\\) are sent in the PATCH body \\(with title\\, event_for\\,$\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^TC02 When invalid authorization information or missing\\/wrong data \\(id\\) are sent in the PATCH body \\(with title\\, event_for\\,$&quot;\" />\r\n      <option name=\"SUGGESTED_NAME\" value=\"Scenario: TC02 When invalid authorization information or missing/wrong data (id) are sent in the PATCH body (with title, event_for,\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$MODULE_WORKING_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"io.cucumber.core.cli.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scenario: TC03 The updateId information in the response body should be validated to be the same as\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"CUCUMBER_CORE_VERSION\" value=\"5\" />\r\n      <option name=\"FILE_PATH\" value=\"$PROJECT_DIR$/src/test/resources/features/API/API_US011.feature\" />\r\n      <option name=\"GLUE\" value=\"stepDefinitions hooks.api\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"io.cucumber.core.cli.Main\" />\r\n      <module name=\"com.projectPreparation\" />\r\n      <option name=\"NAME_FILTER\" value=\"^TC03 The updateId information in the response body should be validated to be the same as$\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^TC03 The updateId information in the response body should be validated to be the same as$&quot;\" />\r\n      <option name=\"SUGGESTED_NAME\" value=\"Scenario: TC03 The updateId information in the response body should be validated to be the same as\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$MODULE_WORKING_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"io.cucumber.core.cli.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scenario: TC_002 GET request failed response with invalid information for visitor list\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scenario: TC_003 Validates information of data with id=250 in response body content\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scenario: [TC001] When a valid authorization information is sent with a GET request to the api/sessionList endpoint,\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"CUCUMBER_CORE_VERSION\" value=\"5\" />\r\n      <option name=\"FILE_PATH\" value=\"$PROJECT_DIR$/src/test/resources/features/API/[API_US006].feature\" />\r\n      <option name=\"GLUE\" value=\"stepDefinitions hooks.api\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"io.cucumber.core.cli.Main\" />\r\n      <module name=\"com.projectPreparation\" />\r\n      <option name=\"NAME_FILTER\" value=\"^\\[TC001\\] When a valid authorization information is sent with a GET request to the api\\/sessionList endpoint\\,$\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^\\[TC001\\] When a valid authorization information is sent with a GET request to the api\\/sessionList endpoint\\,$&quot;\" />\r\n      <option name=\"SUGGESTED_NAME\" value=\"Scenario: [TC001] When a valid authorization information is sent with a GET request to the api/sessionList endpoint,\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$MODULE_WORKING_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"io.cucumber.core.cli.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scenario: [TC001] api/visitorsUpdate endpoint'ine gecerli authorization bilgileri ve dogru datalar\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"CUCUMBER_CORE_VERSION\" value=\"5\" />\r\n      <option name=\"FILE_PATH\" value=\"$PROJECT_DIR$/src/test/resources/features/API/[API_US036].feature\" />\r\n      <option name=\"GLUE\" value=\"stepDefinitions hooks.api\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"io.cucumber.core.cli.Main\" />\r\n      <module name=\"com.projectPreparation\" />\r\n      <option name=\"NAME_FILTER\" value=\"^\\[TC001\\] api\\/visitorsUpdate endpoint\\'ine gecerli authorization bilgileri ve dogru datalar$\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^\\[TC001\\] api\\/visitorsUpdate endpoint\\'ine gecerli authorization bilgileri ve dogru datalar$&quot;\" />\r\n      <option name=\"SUGGESTED_NAME\" value=\"Scenario: [TC001] api/visitorsUpdate endpoint'ine gecerli authorization bilgileri ve dogru datalar\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$MODULE_WORKING_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"io.cucumber.core.cli.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scenario: [TC_001] GET Request Success Response for the Visitor Purpose List\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scenario: [TC_003] The Content of the Visitor Purpose List is validated\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scenario: [TC_003] The First Item of the Visitor Purpose List is validated\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"CUCUMBER_CORE_VERSION\" value=\"5\" />\r\n      <option name=\"FILE_PATH\" value=\"$PROJECT_DIR$/src/test/resources/features/API/[API_US001].feature\" />\r\n      <option name=\"GLUE\" value=\"stepDefinitions hooks.api\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"io.cucumber.core.cli.Main\" />\r\n      <module name=\"Team1_BackendProject\" />\r\n      <option name=\"NAME_FILTER\" value=\"^\\[TC_003\\] The First Item of the Visitor Purpose List is validated$\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^\\[TC_003\\] The First Item of the Visitor Purpose List is validated$&quot;\" />\r\n      <option name=\"SUGGESTED_NAME\" value=\"Scenario: [TC_003] The First Item of the Visitor Purpose List is validated\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$MODULE_WORKING_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"io.cucumber.core.cli.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scenario: \" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"RunnerAPI\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"com.projectPreparation\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"runners.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"runners\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"runners.RunnerAPI\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"RunnerAPI\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Team1_BackendProject\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"runners.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"runners\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"runners.RunnerAPI\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <module name=\"Team1_BackendProject\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^\\[TC_003\\] The Content of the Visitor Purpose List is validated$&quot;\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$MODULE_WORKING_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"io.cucumber.core.cli.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.RunnerAPI\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: [TC_001] GET Request Success Response for the Visitor Purpose List\" />\r\n        <item itemvalue=\"JUnit.RunnerAPI\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: [TC_003] The First Item of the Visitor Purpose List is validated\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: [TC_003] The Content of the Visitor Purpose List is validated\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: [TC_001] GET Request Success Response for the Visitor Purpose List\" />\r\n        <item itemvalue=\"JUnit.RunnerAPI\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: TC_002 GET request failed response with invalid information for visitor list\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: \" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: TC_003 Validates information of data with id=250 in response body content\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: [TC001] api/visitorsUpdate endpoint'ine gecerli authorization bilgileri ve dogru datalar\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: [TC001] When a valid authorization information is sent with a GET request to the api/sessionList endpoint,\" />\r\n        <item itemvalue=\"JUnit.RunnerAPI\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: TC03 The updateId information in the response body should be validated to be the same as\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: TC02 When invalid authorization information or missing/wrong data (id) are sent in the PATCH body (with title, event_for,\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"81b6554b-3ac0-4733-801a-2227054c4cdc\" name=\"Changes\" comment=\"\" />\r\n      <created>1691843673794</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1691843673794</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision fa479c6f6a813ba9bbfd2b6e021a321093588772)
+++ b/.idea/workspace.xml	(date 1692052255613)
@@ -5,6 +5,11 @@
   </component>
   <component name="ChangeListManager">
 
+    <list default="true" id="04a31c52-0f37-4222-8d64-1e1a9790f391" name="Changes" comment=""/>
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/stepDefinitions/APIStepDefinition.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/stepDefinitions/APIStepDefinition.java" afterDir="false" />
+
+
     <list default="true" id="c422d995-8826-4c7b-a337-a4a5d2f71fb4" name="Changes" comment=""/>
       <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_38_AM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_38_AM__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_39_AM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_8_12_2023_7_39_AM__Changes_.xml" afterDir="false" />
@@ -24,6 +29,7 @@
       <change beforePath="$PROJECT_DIR$/src/test/resources/features/API/[API_US001].feature" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/resources/features/API/[API_US001].feature" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/test/resources/features/API/[API_US033].feature" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/resources/features/API/[API_US033].feature" afterDir="false" />
 
+
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -34,16 +40,14 @@
     <option name="done" value="true" />
   </component>
   <component name="Git.Settings">
-    <option name="RECENT_BRANCH_BY_REPOSITORY">
-      <map>
-        <entry key="$PROJECT_DIR$" value="main" />
-      </map>
-    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
+
+  <component name="ProjectId" id="2TwFSVODkhoLe9dZe54tn1jAWri" />
+
   <component name="MavenImportPreferences">
     <option name="generalSettings">
       <MavenGeneralSettings>
@@ -58,21 +62,46 @@
   <component name="ProjectLevelVcsManager" settingsEditedManually="true">
     <ConfirmationsSetting value="1" id="Add" />
   </component>
+
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/gulte/Downloads/Team1_BackendProject/Team1_BackendProject&quot;
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;
   }
 }</component>
 
+  <component name="RunManager" selected="Cucumber Java.Scenario: TC03 The updateId information in the response body should be validated to be the same as the id information,"/>
+    <configuration name="Scenario: TC01 When valid authorization information and correct data (id, title, event_for, session_id, section," type="CucumberJavaRunConfigurationType" factoryName="Cucumber java" temporary="true" nameIsGenerated="true">
+      <option name="CUCUMBER_CORE_VERSION" value="5" />
+      <option name="FILE_PATH" value="$PROJECT_DIR$/src/test/resources/features/API/API_US011.feature" />
+      <option name="GLUE" value="stepDefinitions hooks.api" />
+      <option name="MAIN_CLASS_NAME" value="io.cucumber.core.cli.Main" />
+      <module name="com.projectPreparation" />
+      <option name="NAME_FILTER" value="^TC01 When valid authorization information and correct data \(id\, title\, event_for\, session_id\, section\,$" />
+      <option name="PROGRAM_PARAMETERS" value=" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^TC01 When valid authorization information and correct data \(id\, title\, event_for\, session_id\, section\,$&quot;" />
+      <option name="SUGGESTED_NAME" value="Scenario: TC01 When valid authorization information and correct data (id, title, event_for, session_id, section," />
+      <option name="WORKING_DIRECTORY" value="$MODULE_WORKING_DIR$" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="io.cucumber.core.cli.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+
+
   <component name="RunManager"/>
     <configuration name="Scenario: [TC_001] GET Request Success Response for the Visitor Purpose List" type="CucumberJavaRunConfigurationType" factoryName="Cucumber java" temporary="true" nameIsGenerated="true"/>
 
   <component name="RunManager" selected="Cucumber Java.Scenario: [TC001] api/visitorsUpdate endpoint'ine gecerli authorization bilgileri ve dogru datalar">
+
     <configuration name="Scenario: TC02 When invalid authorization information or missing/wrong data (id) are sent in the PATCH body (with title, event_for," type="CucumberJavaRunConfigurationType" factoryName="Cucumber java" temporary="true" nameIsGenerated="true">
 
       <option name="CUCUMBER_CORE_VERSION" value="5" />
@@ -94,6 +123,46 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
+    <configuration name="Scenario: TC03 The updateId information in the response body should be validated to be the same as the id information ," type="CucumberJavaRunConfigurationType" factoryName="Cucumber java" temporary="true" nameIsGenerated="true">
+      <option name="CUCUMBER_CORE_VERSION" value="5" />
+      <option name="FILE_PATH" value="$PROJECT_DIR$/src/test/resources/features/API/API_US011.feature" />
+      <option name="GLUE" value="stepDefinitions hooks.api" />
+      <option name="MAIN_CLASS_NAME" value="io.cucumber.core.cli.Main" />
+      <module name="com.projectPreparation" />
+      <option name="NAME_FILTER" value="^TC03 The updateId information in the response body should be validated to be the same as the id information \,$" />
+      <option name="PROGRAM_PARAMETERS" value=" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^TC03 The updateId information in the response body should be validated to be the same as the id information \,$&quot;" />
+      <option name="SUGGESTED_NAME" value="Scenario: TC03 The updateId information in the response body should be validated to be the same as the id information ," />
+      <option name="WORKING_DIRECTORY" value="$MODULE_WORKING_DIR$" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="io.cucumber.core.cli.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="Scenario: TC03 The updateId information in the response body should be validated to be the same as the id information," type="CucumberJavaRunConfigurationType" factoryName="Cucumber java" temporary="true" nameIsGenerated="true">
+      <option name="CUCUMBER_CORE_VERSION" value="5" />
+      <option name="FILE_PATH" value="$PROJECT_DIR$/src/test/resources/features/API/API_US011.feature" />
+      <option name="GLUE" value="stepDefinitions hooks.api" />
+      <option name="MAIN_CLASS_NAME" value="io.cucumber.core.cli.Main" />
+      <module name="com.projectPreparation" />
+      <option name="NAME_FILTER" value="^TC03 The updateId information in the response body should be validated to be the same as the id information\,$" />
+      <option name="PROGRAM_PARAMETERS" value=" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^TC03 The updateId information in the response body should be validated to be the same as the id information\,$&quot;" />
+      <option name="SUGGESTED_NAME" value="Scenario: TC03 The updateId information in the response body should be validated to be the same as the id information," />
+      <option name="WORKING_DIRECTORY" value="$MODULE_WORKING_DIR$" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="io.cucumber.core.cli.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <configuration name="Scenario: TC03 The updateId information in the response body should be validated to be the same as" type="CucumberJavaRunConfigurationType" factoryName="Cucumber java" temporary="true" nameIsGenerated="true">
       <option name="CUCUMBER_CORE_VERSION" value="5" />
       <option name="FILE_PATH" value="$PROJECT_DIR$/src/test/resources/features/API/API_US011.feature" />
@@ -114,6 +183,15 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
+
+    <recent_temporary/>
+      <list/>
+        <item itemvalue="Cucumber Java.Scenario: TC03 The updateId information in the response body should be validated to be the same as the id information," />
+        <item itemvalue="Cucumber Java.Scenario: TC02 When invalid authorization information or missing/wrong data (id) are sent in the PATCH body (with title, event_for," />
+        <item itemvalue="Cucumber Java.Scenario: TC03 The updateId information in the response body should be validated to be the same as the id information ," />
+        <item itemvalue="Cucumber Java.Scenario: TC03 The updateId information in the response body should be validated to be the same as" />
+        <item itemvalue="Cucumber Java.Scenario: TC01 When valid authorization information and correct data (id, title, event_for, session_id, section," />
+
     <configuration name="Scenario: TC_002 GET request failed response with invalid information for visitor list" type="CucumberJavaRunConfigurationType" factoryName="Cucumber java" temporary="true" nameIsGenerated="true">
       <method v="2">
         <option name="Make" enabled="true" />
@@ -260,17 +338,18 @@
         <item itemvalue="JUnit.RunnerAPI" />
         <item itemvalue="Cucumber Java.Scenario: TC03 The updateId information in the response body should be validated to be the same as" />
         <item itemvalue="Cucumber Java.Scenario: TC02 When invalid authorization information or missing/wrong data (id) are sent in the PATCH body (with title, event_for," />
+
       </list>
     </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="81b6554b-3ac0-4733-801a-2227054c4cdc" name="Changes" comment="" />
-      <created>1691843673794</created>
+      <changelist id="04a31c52-0f37-4222-8d64-1e1a9790f391" name="Changes" comment="" />
+      <created>1691946236374</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
-      <updated>1691843673794</updated>
+      <updated>1691946236374</updated>
     </task>
     <servers />
   </component>
Index: src/test/resources/features/API/API_US011.feature
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Feature: US11 As an administrator, I want to update the registered Alumni Events information in the system through API connection.\r\n\r\n  Scenario:  TC01 When valid authorization information and correct data (id, title, event_for, session_id, section,\r\n  from_date, to_date, note, event_notification_message, show_onwebsite) are sent in the PATCH body to the api/alumniEventsUpdate endpoint, the expected status\r\n  code is 200, and the message in the response body should be \"Success.\"\r\n\r\n\r\n    * \"ADMIN\" Page User sets \"api/alumniEventsUpdate\" parameters\r\n    * User sends a Patch request to end point\r\n    * Execute a verification for a valid authorization\r\n\r\n  Scenario:  TC02 When invalid authorization information or missing/wrong data (id) are sent in the PATCH body (with title, event_for,\r\n  session_id, section, from_date, to_date, note, event_notification_message, show_onwebsite) to the api/alumniEventsUpdate endpoint,\r\n  the expected status code is 403, and the message in the response body should be \"failed.\"\r\n\r\n    * \"ADMIN\" Page User sets \"api/alumniEventsUpdate\" parameters\r\n    * User sends a Patch request to end point\r\n    * Execute a verification for an invalid authorization\r\n\r\n\r\n    Scenario: TC03 The updateId information in the response body should be validated to be the same as\r\n     the id information in the PATCH request body sent to the api/alumniEventsUpdate endpoint.\r\n      * \"ADMIN\" Page User sets \"api/alumniEventsUpdate\" parameters\r\n      * User sends a Patch request to end point\r\n      * User verifies that the information in the response body  is the same as in the PATCH request body sent to the api alumniEventsUpdate endpoint\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/features/API/API_US011.feature b/src/test/resources/features/API/API_US011.feature
--- a/src/test/resources/features/API/API_US011.feature	(revision fa479c6f6a813ba9bbfd2b6e021a321093588772)
+++ b/src/test/resources/features/API/API_US011.feature	(date 1692052255615)
@@ -4,7 +4,6 @@
   from_date, to_date, note, event_notification_message, show_onwebsite) are sent in the PATCH body to the api/alumniEventsUpdate endpoint, the expected status
   code is 200, and the message in the response body should be "Success."
 
-
     * "ADMIN" Page User sets "api/alumniEventsUpdate" parameters
     * User sends a Patch request to end point
     * Execute a verification for a valid authorization
@@ -13,15 +12,19 @@
   session_id, section, from_date, to_date, note, event_notification_message, show_onwebsite) to the api/alumniEventsUpdate endpoint,
   the expected status code is 403, and the message in the response body should be "failed."
 
-    * "ADMIN" Page User sets "api/alumniEventsUpdate" parameters
+    * "ADMINGulten" Page User sets "api/alumniEventsUpdate" parameters
     * User sends a Patch request to end point
     * Execute a verification for an invalid authorization
 
 
-    Scenario: TC03 The updateId information in the response body should be validated to be the same as
-     the id information in the PATCH request body sent to the api/alumniEventsUpdate endpoint.
+    Scenario: TC03 The updateId information in the response body should be validated to be the same as the id information,
+    in the PATCH request body sent to the api/alumniEventsUpdate endpoint.
       * "ADMIN" Page User sets "api/alumniEventsUpdate" parameters
       * User sends a Patch request to end point
       * User verifies that the information in the response body  is the same as in the PATCH request body sent to the api alumniEventsUpdate endpoint
 
 
+
+
+
+
Index: src/test/java/stepDefinitions/APIStepDefinition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package stepDefinitions;\r\n\r\n\r\nimport emreTestData.TestData;\r\nimport hooks.api.HooksAPI;\r\nimport io.cucumber.java.en.And;\r\nimport io.cucumber.java.en.Given;\r\nimport io.cucumber.java.en.Then;\r\nimport io.restassured.http.ContentType;\r\nimport io.restassured.path.json.JsonPath;\r\nimport io.restassured.response.Response;\r\n\r\nimport org.hamcrest.Matchers;\r\nimport org.json.JSONArray;\r\n\r\nimport org.json.JSONObject;\r\nimport org.junit.Assert;\r\nimport testData.TestData_US_033;\r\nimport utilities.ApiUtils;\r\nimport utilities.Authentication;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport static hooks.api.HooksAPI.spec;\r\nimport static io.restassured.RestAssured.given;\r\nimport static org.hamcrest.CoreMatchers.hasItem;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\n\r\npublic class APIStepDefinition {\r\n\r\n    JSONObject reqBody;\r\n\r\n    Response response1;\r\n    public static String fullPath;\r\n\r\n    //************************** Emre ****************************************\r\n    @Then(\"VisitorsPurpose icin Post request gonderilir.\")\r\n    public void visitorspurposeIcinPostRequestGonderilir() {\r\n\r\n\r\n        /*\r\n        {\r\n            \"visitors_purpose\":\"Veli Ziyareti\",\r\n            \"description\":\"Veli Ziyareti İçin Gelindi\"\r\n        }\r\n         */\r\n\r\n\r\n        ApiUtils.emrePostMethod(\"Veli Ziyareti\",\"Veli Ziyareti İçin Gelindi\");\r\n\r\n        reqBody = new JSONObject();\r\n\r\n        reqBody.put(\"visitors_purpose\",\"Veli Ziyareti\");\r\n        reqBody.put(\"description\",\"Veli Ziyareti İçin Gelindi\");\r\n\r\n        response1 = given()\r\n                .spec(spec)\r\n                .contentType(ContentType.JSON)\r\n                .headers(\"Authorization\",\"Bearer \"+ HooksAPI.token)\r\n                .when()\r\n                .body(reqBody.toString())\r\n                .post(fullPath);\r\n\r\n        response1.prettyPrint();\r\n\r\n\r\n\r\n        ApiUtils.emrePostMethod(\"Veli Ziyareti\",\"Veli Ziyareti İçin Gelindi\");\r\n\r\n    }\r\n\r\n    @Then(\"{string}, {string} icin Post request gonderilir.\")\r\n    public void icinPostRequestGonderilir(String VisitorPurpose, String Description) {\r\n\r\n        ApiUtils.emrePostMethod(VisitorPurpose,Description);\r\n    }\r\n    @And(\"Validate the First Item of the Visitor Purpose List\")\r\n    public void validateTheFirstItemOfTheVisitorPurposeList() {\r\n\r\n        TestData testData=new TestData();\r\n\r\n        HashMap<String,Object> reqBody = testData.dataBodyOlusturMap();\r\n\r\n        Assert.assertEquals(reqBody.get(\"id\"),ApiUtils.respHP.get(\"lists\"));\r\n        Assert.assertEquals(reqBody.get(\"visitors_purpose\"),ApiUtils.respHP.get(\"visitors_purpose\"));\r\n        Assert.assertEquals(reqBody.get(\"created_at\"),ApiUtils.respHP.get(\"created_at\"));\r\n\r\n    }\r\n\r\n    //************************** Ogün ****************************************\r\n    @Given(\"{string} Page User sets {string} parameters\")\r\n    public void page_user_sets_parameters(String page, String path) {\r\n        Authentication.generateToken(page);\r\n        ApiUtils.petParametreSet(path);\r\n    }\r\n\r\n    @Then(\"User sends a get request\")\r\n    public void user_sends_a_get_request() {\r\n        ApiUtils.getRequestMethod();\r\n    }\r\n\r\n    @Then(\"Execute a verification for a valid authorization\")\r\n    public void executeAVerificationForAValidAuthorization() {\r\n        HashMap<String,Object> expectedData = new HashMap<>();\r\n        expectedData.put(\"status\",200);\r\n        expectedData.put(\"message\",\"Success\");\r\n\r\n        Assert.assertEquals(expectedData.get(\"status\"),ApiUtils.respHP.get(\"status\"));\r\n        Assert.assertEquals(expectedData.get(\"message\"),ApiUtils.respHP.get(\"message\"));\r\n    }\r\n\r\n    @Then(\"Execute a verification for an invalid authorization\")\r\n    public void executeAVerificationForAnInvalidAuthorization() {\r\n        HashMap<String,Object> expectedData = new HashMap<>();\r\n        expectedData.put(\"status\",403);\r\n        expectedData.put(\"message\",\"failed\");\r\n\r\n        Assert.assertEquals(expectedData.get(\"status\"),ApiUtils.respHP.get(\"status\"));\r\n        Assert.assertEquals(expectedData.get(\"message\"),ApiUtils.respHP.get(\"message\"));\r\n\r\n    }\r\n\r\n\r\n\r\n    @Given(\"Response body content test for visitor list\")\r\n    public void response_body_content_test_for_visitor_list() {\r\n\r\n        TestData_US_033 testDataUs033 = new TestData_US_033();\r\n\r\n        JSONObject expData = testDataUs033.expDataUS_033();\r\n\r\n        JsonPath resJP = response1.jsonPath();\r\n\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"id\"),resJP.getJsonObject(\"lists.id\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"staff_id\"),resJP.getJsonObject(\"lists.staff_id\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"student_session_id\"),resJP.getJsonObject(\"lists.student_session_id\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"source\"),resJP.getJsonObject(\"lists.source\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"purpose\"),resJP.getJsonObject(\"lists.purpose\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"name\"),resJP.getJsonObject(\"lists.name\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"email\"),resJP.getJsonObject(\"lists.email\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"contact\"),resJP.getJsonObject(\"lists.contact\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"id_proof\"),resJP.getJsonObject(\"lists.id_proof\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"no_of_people\"),resJP.getJsonObject(\"lists.no_of_people\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"date\"),resJP.getJsonObject(\"lists.date\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"in_time\"),resJP.getJsonObject(\"lists.in_time\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"out_time\"),resJP.getJsonObject(\"lists.out_time\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"note\"),resJP.getJsonObject(\"lists.note\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"image\"),resJP.getJsonObject(\"lists.image\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"meeting_with\"),resJP.getJsonObject(\"lists.meeting_with\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"created_at\"),resJP.getJsonObject(\"lists.created_at\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"class\"),resJP.getJsonObject(\"lists.class\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"section\"),resJP.getJsonObject(\"lists.section\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"staff_name\"),resJP.getJsonObject(\"lists.staff_name\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"staff_surname\"),resJP.getJsonObject(\"lists.staff_surname\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"staff_employee_id\"),resJP.getJsonObject(\"lists.staff_employee_id\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"class_id\"),resJP.getJsonObject(\"lists.class_id\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"section_id\"),resJP.getJsonObject(\"lists.section_id\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"students_id\"),resJP.getJsonObject(\"lists.students_id\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"admission_no\"),resJP.getJsonObject(\"lists.admission_no\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"student_firstname\"),resJP.getJsonObject(\"lists.student_firstname\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"student_middlename\"),resJP.getJsonObject(\"lists.student_middlename\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"student_lastname\"),resJP.getJsonObject(\"lists.student_lastname\"));\r\n        Assert.assertEquals(expData.getJSONObject(\"data\").get(\"role_id\"),resJP.getJsonObject(\"lists.role_id\"));\r\n\r\n    }\r\n\r\n    @Given(\"POST request is sent for visitorId\")\r\n    public void post_request_is_sent_for_visitor_ıd() {\r\n\r\n        ApiUtils.postRequestVisitorId();\r\n\r\n\r\n    }\r\n\r\n    @Given(\"Response body content test for visitor Id\")\r\n    public void response_body_content_test_for_visitor_ıd() {\r\n\r\n    }\r\n\r\n\r\n\r\n    // *********************** GUlten ***********************//\r\n    @Given(\"User sends a Patch request to end point\")\r\n    public void user_sends_a_patch_request_to_end_point() {\r\n     // ApiUtils.patchRequestGulten();\r\n\r\n    }\r\n\r\n\r\n    @Then(\"Execute verification for given informations\")\r\n    public void executeVerificationForGivenInformations() {\r\n\r\n        HashMap<String,Object> expectedData = new HashMap<>();\r\n        expectedData.put(\"status\",200);\r\n        expectedData.put(\"message\",\"Success\");\r\n        expectedData.put(\"id\",11);\r\n        expectedData.put(\"session\",\"2017-18\");\r\n        expectedData.put(\"is_active\",\"no\");\r\n        expectedData.put(\"created_at\",\"2017-04-20 02:41:37\");\r\n\r\n        Assert.assertEquals(expectedData.get(\"status\"),ApiUtils.respHP.get(\"status\"));\r\n        Assert.assertEquals(expectedData.get(\"message\"),ApiUtils.respHP.get(\"message\"));\r\n\r\n\r\n    }\r\n\r\n    @Then(\"User sends a POST request for start date {string} and end date {string}\")\r\n    public void userSendsAPOSTRequestForStartDateAndEndDate(String start, String end) {\r\n        ApiUtils.postMethodEventsByDateRange(start,end);\r\n    }\r\n\r\n    @Given(\"User verifies that the information in the response body  is the same as in the PATCH request body sent to the api alumniEventsUpdate endpoint\")\r\n    public void user_verifies_that_the_information_in_the_response_body_is_the_same_as_in_the_patch_request_body_sent_to_the_api_alumni_events_update_endpoint() {\r\n\r\n        JSONObject  reqBody =new JSONObject();\r\n        reqBody.put(\"id\", 5);\r\n        reqBody.put(\"title\",\"Sports Activite 2\");\r\n        reqBody.put(\"event_for\",\"all\");\r\n        reqBody.put(\"session_id\", \"null\");\r\n        reqBody.put(\"section\",\"null\");\r\n        reqBody.put(\"from_date\",\"2023-02-14 00:00:00\");\r\n        reqBody.put(\"to_date\",\"2023-02-15 23:59:00\");\r\n        reqBody.put(\"note\",\"Sports\");\r\n        reqBody.put(\"event_notification_message\",\"Sports\");\r\n        reqBody.put(\"show_onwebsite\",\"0\");\r\n        response1 = given()\r\n                .spec(spec)\r\n                .contentType(ContentType.JSON)\r\n                .headers(\"Authorization\",\"Bearer \"+ HooksAPI.token)\r\n                .when()\r\n                .body(reqBody.toString())\r\n                .patch(fullPath);\r\n        response1.prettyPrint();\r\n\r\n    JSONObject jsonResponseBody =new JSONObject();\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    @Then(\"User sends a PATCH request to visitorsUpdate endpoint\")\r\n    public void userSendsAPATCHRequestToVisitorsUpdateEndpoint() {\r\n        ApiUtils.patchRequestVisitorsUpdateOgun();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/stepDefinitions/APIStepDefinition.java b/src/test/java/stepDefinitions/APIStepDefinition.java
--- a/src/test/java/stepDefinitions/APIStepDefinition.java	(revision fa479c6f6a813ba9bbfd2b6e021a321093588772)
+++ b/src/test/java/stepDefinitions/APIStepDefinition.java	(date 1692052255614)
@@ -50,17 +50,17 @@
          */
 
 
-        ApiUtils.emrePostMethod("Veli Ziyareti","Veli Ziyareti İçin Gelindi");
+        ApiUtils.emrePostMethod("Veli Ziyareti", "Veli Ziyareti İçin Gelindi");
 
         reqBody = new JSONObject();
 
-        reqBody.put("visitors_purpose","Veli Ziyareti");
-        reqBody.put("description","Veli Ziyareti İçin Gelindi");
+        reqBody.put("visitors_purpose", "Veli Ziyareti");
+        reqBody.put("description", "Veli Ziyareti İçin Gelindi");
 
         response1 = given()
                 .spec(spec)
                 .contentType(ContentType.JSON)
-                .headers("Authorization","Bearer "+ HooksAPI.token)
+                .headers("Authorization", "Bearer " + HooksAPI.token)
                 .when()
                 .body(reqBody.toString())
                 .post(fullPath);
@@ -68,26 +68,26 @@
         response1.prettyPrint();
 
 
-
-        ApiUtils.emrePostMethod("Veli Ziyareti","Veli Ziyareti İçin Gelindi");
+        ApiUtils.emrePostMethod("Veli Ziyareti", "Veli Ziyareti İçin Gelindi");
 
     }
 
     @Then("{string}, {string} icin Post request gonderilir.")
     public void icinPostRequestGonderilir(String VisitorPurpose, String Description) {
 
-        ApiUtils.emrePostMethod(VisitorPurpose,Description);
+        ApiUtils.emrePostMethod(VisitorPurpose, Description);
     }
+
     @And("Validate the First Item of the Visitor Purpose List")
     public void validateTheFirstItemOfTheVisitorPurposeList() {
 
-        TestData testData=new TestData();
+        TestData testData = new TestData();
 
-        HashMap<String,Object> reqBody = testData.dataBodyOlusturMap();
+        HashMap<String, Object> reqBody = testData.dataBodyOlusturMap();
 
-        Assert.assertEquals(reqBody.get("id"),ApiUtils.respHP.get("lists"));
-        Assert.assertEquals(reqBody.get("visitors_purpose"),ApiUtils.respHP.get("visitors_purpose"));
-        Assert.assertEquals(reqBody.get("created_at"),ApiUtils.respHP.get("created_at"));
+        Assert.assertEquals(reqBody.get("id"), ApiUtils.respHP.get("lists"));
+        Assert.assertEquals(reqBody.get("visitors_purpose"), ApiUtils.respHP.get("visitors_purpose"));
+        Assert.assertEquals(reqBody.get("created_at"), ApiUtils.respHP.get("created_at"));
 
     }
 
@@ -105,27 +105,26 @@
 
     @Then("Execute a verification for a valid authorization")
     public void executeAVerificationForAValidAuthorization() {
-        HashMap<String,Object> expectedData = new HashMap<>();
-        expectedData.put("status",200);
-        expectedData.put("message","Success");
+        HashMap<String, Object> expectedData = new HashMap<>();
+        expectedData.put("status", 200);
+        expectedData.put("message", "Success");
 
-        Assert.assertEquals(expectedData.get("status"),ApiUtils.respHP.get("status"));
-        Assert.assertEquals(expectedData.get("message"),ApiUtils.respHP.get("message"));
+        Assert.assertEquals(expectedData.get("status"), ApiUtils.respHP.get("status"));
+        Assert.assertEquals(expectedData.get("message"), ApiUtils.respHP.get("message"));
     }
 
     @Then("Execute a verification for an invalid authorization")
     public void executeAVerificationForAnInvalidAuthorization() {
-        HashMap<String,Object> expectedData = new HashMap<>();
-        expectedData.put("status",403);
-        expectedData.put("message","failed");
+        HashMap<String, Object> expectedData = new HashMap<>();
+        expectedData.put("status", 403);
+        expectedData.put("message", "failed");
 
-        Assert.assertEquals(expectedData.get("status"),ApiUtils.respHP.get("status"));
-        Assert.assertEquals(expectedData.get("message"),ApiUtils.respHP.get("message"));
+        Assert.assertEquals(expectedData.get("status"), ApiUtils.respHP.get("status"));
+        Assert.assertEquals(expectedData.get("message"), ApiUtils.respHP.get("message"));
 
     }
 
 
-
     @Given("Response body content test for visitor list")
     public void response_body_content_test_for_visitor_list() {
 
@@ -135,36 +134,36 @@
 
         JsonPath resJP = response1.jsonPath();
 
-        Assert.assertEquals(expData.getJSONObject("data").get("id"),resJP.getJsonObject("lists.id"));
-        Assert.assertEquals(expData.getJSONObject("data").get("staff_id"),resJP.getJsonObject("lists.staff_id"));
-        Assert.assertEquals(expData.getJSONObject("data").get("student_session_id"),resJP.getJsonObject("lists.student_session_id"));
-        Assert.assertEquals(expData.getJSONObject("data").get("source"),resJP.getJsonObject("lists.source"));
-        Assert.assertEquals(expData.getJSONObject("data").get("purpose"),resJP.getJsonObject("lists.purpose"));
-        Assert.assertEquals(expData.getJSONObject("data").get("name"),resJP.getJsonObject("lists.name"));
-        Assert.assertEquals(expData.getJSONObject("data").get("email"),resJP.getJsonObject("lists.email"));
-        Assert.assertEquals(expData.getJSONObject("data").get("contact"),resJP.getJsonObject("lists.contact"));
-        Assert.assertEquals(expData.getJSONObject("data").get("id_proof"),resJP.getJsonObject("lists.id_proof"));
-        Assert.assertEquals(expData.getJSONObject("data").get("no_of_people"),resJP.getJsonObject("lists.no_of_people"));
-        Assert.assertEquals(expData.getJSONObject("data").get("date"),resJP.getJsonObject("lists.date"));
-        Assert.assertEquals(expData.getJSONObject("data").get("in_time"),resJP.getJsonObject("lists.in_time"));
-        Assert.assertEquals(expData.getJSONObject("data").get("out_time"),resJP.getJsonObject("lists.out_time"));
-        Assert.assertEquals(expData.getJSONObject("data").get("note"),resJP.getJsonObject("lists.note"));
-        Assert.assertEquals(expData.getJSONObject("data").get("image"),resJP.getJsonObject("lists.image"));
-        Assert.assertEquals(expData.getJSONObject("data").get("meeting_with"),resJP.getJsonObject("lists.meeting_with"));
-        Assert.assertEquals(expData.getJSONObject("data").get("created_at"),resJP.getJsonObject("lists.created_at"));
-        Assert.assertEquals(expData.getJSONObject("data").get("class"),resJP.getJsonObject("lists.class"));
-        Assert.assertEquals(expData.getJSONObject("data").get("section"),resJP.getJsonObject("lists.section"));
-        Assert.assertEquals(expData.getJSONObject("data").get("staff_name"),resJP.getJsonObject("lists.staff_name"));
-        Assert.assertEquals(expData.getJSONObject("data").get("staff_surname"),resJP.getJsonObject("lists.staff_surname"));
-        Assert.assertEquals(expData.getJSONObject("data").get("staff_employee_id"),resJP.getJsonObject("lists.staff_employee_id"));
-        Assert.assertEquals(expData.getJSONObject("data").get("class_id"),resJP.getJsonObject("lists.class_id"));
-        Assert.assertEquals(expData.getJSONObject("data").get("section_id"),resJP.getJsonObject("lists.section_id"));
-        Assert.assertEquals(expData.getJSONObject("data").get("students_id"),resJP.getJsonObject("lists.students_id"));
-        Assert.assertEquals(expData.getJSONObject("data").get("admission_no"),resJP.getJsonObject("lists.admission_no"));
-        Assert.assertEquals(expData.getJSONObject("data").get("student_firstname"),resJP.getJsonObject("lists.student_firstname"));
-        Assert.assertEquals(expData.getJSONObject("data").get("student_middlename"),resJP.getJsonObject("lists.student_middlename"));
-        Assert.assertEquals(expData.getJSONObject("data").get("student_lastname"),resJP.getJsonObject("lists.student_lastname"));
-        Assert.assertEquals(expData.getJSONObject("data").get("role_id"),resJP.getJsonObject("lists.role_id"));
+        Assert.assertEquals(expData.getJSONObject("data").get("id"), resJP.getJsonObject("lists.id"));
+        Assert.assertEquals(expData.getJSONObject("data").get("staff_id"), resJP.getJsonObject("lists.staff_id"));
+        Assert.assertEquals(expData.getJSONObject("data").get("student_session_id"), resJP.getJsonObject("lists.student_session_id"));
+        Assert.assertEquals(expData.getJSONObject("data").get("source"), resJP.getJsonObject("lists.source"));
+        Assert.assertEquals(expData.getJSONObject("data").get("purpose"), resJP.getJsonObject("lists.purpose"));
+        Assert.assertEquals(expData.getJSONObject("data").get("name"), resJP.getJsonObject("lists.name"));
+        Assert.assertEquals(expData.getJSONObject("data").get("email"), resJP.getJsonObject("lists.email"));
+        Assert.assertEquals(expData.getJSONObject("data").get("contact"), resJP.getJsonObject("lists.contact"));
+        Assert.assertEquals(expData.getJSONObject("data").get("id_proof"), resJP.getJsonObject("lists.id_proof"));
+        Assert.assertEquals(expData.getJSONObject("data").get("no_of_people"), resJP.getJsonObject("lists.no_of_people"));
+        Assert.assertEquals(expData.getJSONObject("data").get("date"), resJP.getJsonObject("lists.date"));
+        Assert.assertEquals(expData.getJSONObject("data").get("in_time"), resJP.getJsonObject("lists.in_time"));
+        Assert.assertEquals(expData.getJSONObject("data").get("out_time"), resJP.getJsonObject("lists.out_time"));
+        Assert.assertEquals(expData.getJSONObject("data").get("note"), resJP.getJsonObject("lists.note"));
+        Assert.assertEquals(expData.getJSONObject("data").get("image"), resJP.getJsonObject("lists.image"));
+        Assert.assertEquals(expData.getJSONObject("data").get("meeting_with"), resJP.getJsonObject("lists.meeting_with"));
+        Assert.assertEquals(expData.getJSONObject("data").get("created_at"), resJP.getJsonObject("lists.created_at"));
+        Assert.assertEquals(expData.getJSONObject("data").get("class"), resJP.getJsonObject("lists.class"));
+        Assert.assertEquals(expData.getJSONObject("data").get("section"), resJP.getJsonObject("lists.section"));
+        Assert.assertEquals(expData.getJSONObject("data").get("staff_name"), resJP.getJsonObject("lists.staff_name"));
+        Assert.assertEquals(expData.getJSONObject("data").get("staff_surname"), resJP.getJsonObject("lists.staff_surname"));
+        Assert.assertEquals(expData.getJSONObject("data").get("staff_employee_id"), resJP.getJsonObject("lists.staff_employee_id"));
+        Assert.assertEquals(expData.getJSONObject("data").get("class_id"), resJP.getJsonObject("lists.class_id"));
+        Assert.assertEquals(expData.getJSONObject("data").get("section_id"), resJP.getJsonObject("lists.section_id"));
+        Assert.assertEquals(expData.getJSONObject("data").get("students_id"), resJP.getJsonObject("lists.students_id"));
+        Assert.assertEquals(expData.getJSONObject("data").get("admission_no"), resJP.getJsonObject("lists.admission_no"));
+        Assert.assertEquals(expData.getJSONObject("data").get("student_firstname"), resJP.getJsonObject("lists.student_firstname"));
+        Assert.assertEquals(expData.getJSONObject("data").get("student_middlename"), resJP.getJsonObject("lists.student_middlename"));
+        Assert.assertEquals(expData.getJSONObject("data").get("student_lastname"), resJP.getJsonObject("lists.student_lastname"));
+        Assert.assertEquals(expData.getJSONObject("data").get("role_id"), resJP.getJsonObject("lists.role_id"));
 
     }
 
@@ -182,86 +181,72 @@
     }
 
 
-
     // *********************** GUlten ***********************//
     @Given("User sends a Patch request to end point")
     public void user_sends_a_patch_request_to_end_point() {
-     // ApiUtils.patchRequestGulten();
+        // ApiUtils.patchRequestGulten();
 
     }
 
-
-    @Then("Execute verification for given informations")
-    public void executeVerificationForGivenInformations() {
-
-        HashMap<String,Object> expectedData = new HashMap<>();
-        expectedData.put("status",200);
-        expectedData.put("message","Success");
-        expectedData.put("id",11);
-        expectedData.put("session","2017-18");
-        expectedData.put("is_active","no");
-        expectedData.put("created_at","2017-04-20 02:41:37");
-
-        Assert.assertEquals(expectedData.get("status"),ApiUtils.respHP.get("status"));
-        Assert.assertEquals(expectedData.get("message"),ApiUtils.respHP.get("message"));
-
-
-    }
-
-    @Then("User sends a POST request for start date {string} and end date {string}")
-    public void userSendsAPOSTRequestForStartDateAndEndDate(String start, String end) {
-        ApiUtils.postMethodEventsByDateRange(start,end);
-    }
-
     @Given("User verifies that the information in the response body  is the same as in the PATCH request body sent to the api alumniEventsUpdate endpoint")
     public void user_verifies_that_the_information_in_the_response_body_is_the_same_as_in_the_patch_request_body_sent_to_the_api_alumni_events_update_endpoint() {
 
-        JSONObject  reqBody =new JSONObject();
+        JSONObject reqBody = new JSONObject();
         reqBody.put("id", 5);
-        reqBody.put("title","Sports Activite 2");
-        reqBody.put("event_for","all");
+        reqBody.put("title", "Sports Activite 2");
+        reqBody.put("event_for", "all");
         reqBody.put("session_id", "null");
-        reqBody.put("section","null");
-        reqBody.put("from_date","2023-02-14 00:00:00");
-        reqBody.put("to_date","2023-02-15 23:59:00");
-        reqBody.put("note","Sports");
-        reqBody.put("event_notification_message","Sports");
-        reqBody.put("show_onwebsite","0");
+        reqBody.put("section", "null");
+        reqBody.put("from_date", "2023-02-14 00:00:00");
+        reqBody.put("to_date", "2023-02-15 23:59:00");
+        reqBody.put("note", "Sports");
+        reqBody.put("event_notification_message", "Sports");
+        reqBody.put("show_onwebsite", "0");
         response1 = given()
                 .spec(spec)
                 .contentType(ContentType.JSON)
-                .headers("Authorization","Bearer "+ HooksAPI.token)
+                .headers("Authorization", "Bearer " + HooksAPI.token)
                 .when()
                 .body(reqBody.toString())
                 .patch(fullPath);
         response1.prettyPrint();
 
-    JSONObject jsonResponseBody =new JSONObject();
-
-    }
+        JsonPath resJP = response1.jsonPath();
+        Assert.assertEquals(reqBody.get("id"), resJP.get("updateId"));
+        /*{
+            "status": 200,
+                "message": "Success",
+                "Token_remaining_time": 813,
+                "updateId": 5
+        }
 
-
-
-
-
-
-
-
-
+         */
+    }
 
+    // *********************** GUlten ***********************//
 
 
+    @Then("Execute verification for given informations")
+    public void executeVerificationForGivenInformations() {
 
+        HashMap<String, Object> expectedData = new HashMap<>();
+        expectedData.put("status", 200);
+        expectedData.put("message", "Success");
+        expectedData.put("id", 11);
+        expectedData.put("session", "2017-18");
+        expectedData.put("is_active", "no");
+        expectedData.put("created_at", "2017-04-20 02:41:37");
 
+        Assert.assertEquals(expectedData.get("status"), ApiUtils.respHP.get("status"));
+        Assert.assertEquals(expectedData.get("message"), ApiUtils.respHP.get("message"));
 
 
+    }
 
-
-
-
-
-
-
+    @Then("User sends a POST request for start date {string} and end date {string}")
+    public void userSendsAPOSTRequestForStartDateAndEndDate(String start, String end) {
+        ApiUtils.postMethodEventsByDateRange(start, end);
+    }
 
 
     @Then("User sends a PATCH request to visitorsUpdate endpoint")
@@ -269,6 +254,7 @@
         ApiUtils.patchRequestVisitorsUpdateOgun();
     }
 
+
 }
 
 
@@ -282,3 +268,4 @@
 
 
 
+
Index: src/test/java/utilities/ApiUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package utilities;\r\n\r\nimport hooks.api.HooksAPI;\r\nimport io.restassured.http.ContentType;\r\nimport io.restassured.response.Response;\r\nimport org.json.JSONObject;\r\nimport stepDefinitions.APIStepDefinition;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport static hooks.api.HooksAPI.spec;\r\nimport static io.restassured.RestAssured.given;\r\n\r\n\r\npublic class ApiUtils {\r\n\r\n    public static Response response;\r\n\r\n    public static String fullPath;\r\n\r\n    public static HashMap<String, Object> respHP;\r\n\r\n    public static void getRequestMethod() {\r\n\r\n        response = given()\r\n                .spec(spec)\r\n                .contentType(ContentType.JSON)\r\n                .header(\"Accept\", \"application/json\")\r\n                .headers(\"Authorization\", \"Bearer \" + HooksAPI.token)\r\n                .when()\r\n                .get(fullPath);\r\n\r\n        response.prettyPrint();\r\n        respHP = response.as(HashMap.class);\r\n    }\r\n\r\n    public static void emrePostMethod(String visitors_purpose, String description) {\r\n\r\n        JSONObject reqBody = new JSONObject();\r\n\r\n        reqBody.put(\"visitors_purpose\", visitors_purpose);\r\n        reqBody.put(\"description\", description);\r\n\r\n\r\n        response = given()\r\n                .spec(spec)\r\n                .contentType(ContentType.JSON)\r\n                .header(\"Accept\", \"application/json\")\r\n                .headers(\"Authorization\", \"Bearer \" + HooksAPI.token)\r\n                .when()\r\n                .body(reqBody.toString())\r\n                .post(fullPath);\r\n\r\n        response.prettyPrint();\r\n        respHP = response.as(HashMap.class);\r\n    }\r\n\r\n    public static void petParametreSet(String rawPaths) {\r\n\r\n        // api/visitorsList\r\n\r\n        String[] paths = rawPaths.split(\"/\"); // [\"api\",\"visitorsList\"]\r\n\r\n        System.out.println(Arrays.toString(paths));\r\n\r\n       /*\r\n        spec.pathParam(\"pp1\",\"api\");\r\n        spec.pathParam(\"pp2\",\"visitorsList\");\r\n        */\r\n\r\n        StringBuilder tempPath = new StringBuilder(\"/{\");\r\n\r\n\r\n        for (int i = 0; i < paths.length; i++) {\r\n\r\n            String key = \"pp\" + i;\r\n            String value = paths[i].trim();\r\n\r\n            HooksAPI.spec.pathParam(key, value);\r\n\r\n            tempPath.append(key + \"}/{\");\r\n        }\r\n        tempPath.deleteCharAt(tempPath.lastIndexOf(\"{\"));\r\n        tempPath.deleteCharAt(tempPath.lastIndexOf(\"/\"));\r\n\r\n        fullPath = tempPath.toString();\r\n        System.out.println(\"fullPath = \" + fullPath);\r\n\r\n    }\r\n\r\n\r\n    public static Response deleteRequest() {\r\n        Response response = given().headers(\r\n                \"Authorization\",\r\n                \"Bearer \" + HooksAPI.token,\r\n                \"Content-Type\",\r\n                ContentType.JSON,\r\n                \"Accept\",\r\n                ContentType.JSON).when().delete(fullPath);\r\n        return response;\r\n    }\r\n\r\n\r\n    // alumni Events By Date Range Post Request Method\r\n\r\n\r\n\r\n    public static void postMethodEventsByDateRange(String start, String end) {\r\n\r\n\r\n        JSONObject reqBody = new JSONObject();\r\n\r\n        reqBody.put(\"start\", start);\r\n        reqBody.put(\"end\", end);\r\n\r\n\r\n        response = given()\r\n                .spec(spec)\r\n                .contentType(ContentType.JSON)\r\n                .header(\"Accept\", \"application/json\")\r\n                .headers(\"Authorization\", \"Bearer \" + HooksAPI.token)\r\n                .when()\r\n                .body(reqBody.toString())\r\n                .post(fullPath);\r\n\r\n        response.prettyPrint();\r\n        respHP = response.as(HashMap.class);\r\n\r\n\r\n    }\r\n\r\n\r\n        public static void patchRequestGulten(){\r\n\r\n         /* {\r\n            \"id\": 3,\r\n                \"title\": \"Sports Activite 2\",\r\n                \"event_for\": \"all\",\r\n                \"session_id\": null,\r\n                \"section\": \"null\",\r\n                \"from_date\": \"2023-02-14 00:00:00\",\r\n                \"to_date\": \"2023-02-15 23:59:00\",\r\n                \"note\": \"Sports\",\r\n                \"event_notification_message\": \"Sports\",\r\n                \"show_onwebsite\": \"0\"\r\n        }\r\n\r\n        */\r\n\r\n\r\n            JSONObject reqBody = new JSONObject();\r\n            reqBody.put(\"id\", 5);\r\n            reqBody.put(\"title\", \"Sports Activite 2\");\r\n            reqBody.put(\"event_for\", \"all\");\r\n            reqBody.put(\"session_id\", \"null\");\r\n            reqBody.put(\"section\", \"null\");\r\n            reqBody.put(\"from_date\", \"2023-02-14 00:00:00\");\r\n            reqBody.put(\"to_date\", \"2023-02-15 23:59:00\");\r\n            reqBody.put(\"note\", \"Sports\");\r\n            reqBody.put(\"event_notification_message\", \"Sports\");\r\n            reqBody.put(\"show_onwebsite\", \"0\");\r\n            response = given()\r\n                    .spec(spec)\r\n                    .contentType(ContentType.JSON)\r\n                    .headers(\"Authorization\", \"Bearer \" + HooksAPI.token)\r\n                    .when()\r\n                    .body(reqBody.toString())\r\n                    .patch(fullPath);\r\n            response.prettyPrint();\r\n            respHP = response.as(HashMap.class);\r\n\r\n        }\r\n\r\n        public static void patchRequestVisitorsUpdateOgun(){\r\n\r\n            JSONObject reqBody = new JSONObject();\r\n            reqBody.put(\"id\", 232);\r\n            reqBody.put(\"purpose\", \"Principal Meeting\");\r\n            reqBody.put(\"name\", \"Kenan1\");\r\n            reqBody.put(\"contact\", \"9808678686112\");\r\n            reqBody.put(\"id_proof\", \"312121\");\r\n            reqBody.put(\"no_of_people\", \"16\");\r\n            reqBody.put(\"date\", \"2023-03-16\");\r\n            reqBody.put(\"in_time\", \"06:00 PM\");\r\n            reqBody.put(\"out_time\", \"06:30 PM\");\r\n            reqBody.put(\"note\", \"PTM meeting\");\r\n            response = given()\r\n                    .spec(spec)\r\n                    .contentType(ContentType.JSON)\r\n                    .headers(\"Authorization\", \"Bearer \" + HooksAPI.token)\r\n                    .when()\r\n                    .body(reqBody.toString())\r\n                    .patch(fullPath);\r\n            response.prettyPrint();\r\n            respHP = response.as(HashMap.class);\r\n        }\r\n\r\n        public static void postVisitorsIDOgun(){\r\n\r\n            JSONObject reqBody = new JSONObject();\r\n            reqBody.put(\"id\", 232);\r\n            response = given()\r\n                    .spec(spec)\r\n                    .contentType(ContentType.JSON)\r\n                    .headers(\"Authorization\", \"Bearer \" + HooksAPI.token)\r\n                    .when()\r\n                    .body(reqBody.toString())\r\n                    .put(fullPath);\r\n            response.prettyPrint();\r\n            respHP = response.as(HashMap.class);\r\n        }\r\n\r\n\r\n\r\n    public static void postRequestVisitorId(){\r\n\r\n        JSONObject reqBody=new JSONObject();\r\n\r\n        reqBody.put(\"id\",250);\r\n\r\n        response = given()\r\n                .spec(spec)\r\n                .contentType(ContentType.JSON)\r\n                .header(\"Accept\",\"application/json\")\r\n                .headers(\"Authorization\",\"Bearer \" + HooksAPI.token)\r\n                .when()\r\n                .body(reqBody.toString())\r\n                .post(fullPath);\r\n\r\n        response.prettyPrint();\r\n        respHP=response.as(HashMap.class);\r\n\r\n\r\n    }\r\n\r\n    public static void invalidPostRequestVisitorId(){\r\n\r\n        JSONObject reqBody=new JSONObject();\r\n\r\n        reqBody.put(\"id\",3250);\r\n\r\n        response = given()\r\n                .spec(spec)\r\n                .contentType(ContentType.JSON)\r\n                .header(\"Accept\",\"application/json\")\r\n                .headers(\"Authorization\",\"Bearer \" + HooksAPI.token)\r\n                .when()\r\n                .body(reqBody.toString())\r\n                .post(fullPath);\r\n\r\n        response.prettyPrint();\r\n        respHP=response.as(HashMap.class);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/utilities/ApiUtils.java b/src/test/java/utilities/ApiUtils.java
--- a/src/test/java/utilities/ApiUtils.java	(revision fa479c6f6a813ba9bbfd2b6e021a321093588772)
+++ b/src/test/java/utilities/ApiUtils.java	(date 1692052255614)
@@ -14,7 +14,7 @@
 public class ApiUtils {
 
     public static Response response;
-
+    public  static JSONObject  reqBody;
     public static String fullPath;
 
     public static HashMap<String, Object> respHP;
@@ -132,7 +132,7 @@
         public static void patchRequestGulten(){
 
          /* {
-            "id": 3,
+            "id": 5,
                 "title": "Sports Activite 2",
                 "event_for": "all",
                 "session_id": null,
